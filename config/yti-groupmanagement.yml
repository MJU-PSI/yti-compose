---
spring:
  profile: local
  application:
    name: yti-groupmanagement
  mail:
    host: smtp.pouta.csc.fi
    properties:
      smtp:
        connectiontimeout: 5000
        timeout: 3000
        writetimeout: 5000
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${environment.postgres.host}:${environment.postgres.port}/${service.database-name}
    username: postgres
    password:

service:
  database-name: groupmanagement

server:
  port: 8002

logging:
  level:
    fi.vm.yti: DEBUG

registration:
  url: https://id.eduuni.fi/signup?returnUrl=https://yhteentoimiva.suomi.fi

groupmanagement:
  url: ${environment.groupmanagement.url}

environment:
  url: ${environment.groupmanagement.public-url}

send:
  admin:
    emails: false

application:
  codeListUrl: ${environment.codelist.public-url}
  dataModelUrl: ${environment.datamodel.public-url}
  terminologyUrl: ${environment.terminology.public-url}
  commentsUrl: ${environment.comments.public-url}
  env: local
  messagingEnabled: ${environment.messaging.enabled}

jwt:
  secret: TESTSECRET

fake:
  login:
    allowed: true
    mail: "john.doe@example.com"
    firstName: "John"
    lastName: "Doe"

impersonate:
  allowed: true

---
spring:
  profile: docker
  application:
    name: yti-groupmanagement
  mail:
    host: smtp.pouta.csc.fi
    properties:
      smtp:
        connectiontimeout: 5000
        timeout: 3000
        writetimeout: 5000
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://${environment.postgres.host}:${environment.postgres.port}/${service.database-name}
    username: postgres
    password:

service:
  database-name: groupmanagement

server:
  port: 8002

logging:
  level:
    fi.vm.yti: DEBUG

registration:
  url: https://id.eduuni.fi/signup?returnUrl=https://yhteentoimiva.suomi.fi

groupmanagement:
  url: ${environment.groupmanagement.url}

environment:
  url: ${environment.groupmanagement.public-url}

send:
  admin:
    emails: false

application:
  codeListUrl: ${environment.codelist.public-url}
  dataModelUrl: ${environment.datamodel.public-url}
  terminologyUrl: ${environment.terminology.public-url}
  commentsUrl: ${environment.comments.public-url}
  env: local
  messagingEnabled: ${environment.messaging.enabled}

jwt:
  secret: TESTSECRET

fake:
  login:
    allowed: true
    mail: "john.doe@example.com"
    firstName: "John"
    lastName: "Doe"

impersonate:
  allowed: true
